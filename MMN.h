#pragma once

#ifndef MMN_H
#define MMN_H

#include <string>
#include <fstream>
#include <iostream>
#include <math.h>
#include "TMatrix.h"

using namespace std;

class MMN
{
protected:
	TMatrix<double> V, R, F, U;			//Решение задачи, невязка и значение функции в правой части соответственно
	TVector<double> xBorder, yBorder;	//Границы по оси x и y соответственно
	double h, k;						//Шаг по оси x и y соответственно
	double hE, kE, A;					//Вспомогательные данные
	int n, m;							//Размерность сетки
	double pi;							// Пи
	string taskName;					// "T" или "M" - тестовая задача или основная задача

public:
	MMN();
	MMN(int N, int M, TVector<double> XBorder, TVector<double> YBorder, string _taskName = "T", string _interpolation = "0"); //Конструктор инициализации

	double F_Function(double x, double y); //Функция в правой части (-f(x,y))
	void FunctionInicialisation();
	double ExactSolution(double x, double y);//Точные решения
	double XInicialConditions(double x, int Num); //Начальные условия в виде функций параллельно оси X
	double YInicialConditions(double y, int Num); //Начальные условия в виде функций параллельно оси Y
	void Inicialisation(); //Заполнение начальных условий в наше решение

	//virtual double Runner(); //Итерационный метод


	virtual TVector<double> MethodAccuracy(TVector<double> eps, TVector<int> MaxIterations, char Name); //Точность решения, для основных задач
	virtual TVector<double> MethodError(double eps, int MaxIterations); //Погрешность решения, для тестовых задач

	void VectorNevyazki();
	double NevyazkaInf(); //Невязка по норме бесконечность
	double NevyazkaEvkl(); //Евклидова норма невязки

	void XInterpolation();
	void YInterpolation();

	void SaveGrid(string s);
	void SaveData(string s);
	void SaveExData(string s);

	//----------------------------------------------------------------------------------
private:
	double tau;
public:
	void SetParams();
	double Runner();
	TVector<double> SolvingMainTask(TVector<double> eps, TVector<int> MaxIterations);
	TVector<double> SolvingTestTask(TVector<double> eps, TVector<int> MaxIterations);
};

#endif
